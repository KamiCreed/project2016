<!-- put this where ever you want the google maps to show up
<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div>

<script src="//maps.google.com/maps/api/js?v=3.18&sensor=false&client=&key=&libraries=geometry&language=&hl=&region="></script> 
<script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"></script>

<script>
handler = Gmaps.build('Google');
handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
  markers = handler.addMarkers([
    {
      "lat": 0,
      "lng": 0,
      "picture": {
        "url": "http://people.mozilla.com/~faaborg/files/shiretoko/firefoxIcon/firefox-32.png",
        "width":  32,
        "height": 32
      },
      "infowindow": "hello!"
    }
  ]);
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
});
</script> 
-->

<h1 id="asdf">This is where the game will go</h1>
<p id="additional" style="font-size: 20px; color: red; text-align: center">  </p>



<!-- Style the game display canvas however you wish by syling the 'Game' id -->
<div id="Game" style="padding: 10px;">
    
    <!-- Page specific javascript, don't include these into the resource manifest file since we don't want these
        to be available in every single page of our application.-->
    <%= javascript_include_tag "screenTransitionEffects"%>
    <%= javascript_include_tag "rpgEntity" %>
    <%= javascript_include_tag "stateManager" %>
    <%= javascript_include_tag "objectHighlighter" %>
    <%= javascript_include_tag "textbox" %>
    <%= javascript_include_tag "actionDisplay" %>
    <%= javascript_include_tag "bootState"%>
    <%= javascript_include_tag "overworldSubstateFunctions" %>
    <%= javascript_include_tag "overworldState"%>
    <%= javascript_include_tag "battleSubstateFunctions"%>
    <%= javascript_include_tag "battleState" %>
    
    <script>
    
        //for whatever reason the overworldState object is not created unless the screen is refreshed, so forcibly refresh the screen
        if(typeof overworldState === "undefined") {
            
            location.reload();
        };
    
        /*
        
        Before you start wokring on the game, please make sure you understand how to make a game using phaser (basic knowledge).
        
        You can go through this tutorial for a veeeeeery basic introduction to phaser game development: http://phaser.io/tutorials/making-your-first-phaser-game
        and then go through this tutorial to see how to use game states and other stuff: https://software.intel.com/en-us/html5/hub/blogs/how-to-make-a-sidescroller-game-with-html5
        
        
        */
        
        
        //Returns a random integer between min (inclusive) and max (inclusive)
        function getRandomInt(min, max) {
            
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        
        function clamp(number, min, max) {
            
            return Math.max(min, Math.min(number, max));
        };
        
        //create instance of the game engine.
        //This creates the canvas for the game to display, and allows you to use the Phaser engine
        var game = new Phaser.Game(800, 600, Phaser.AUTO, 'Game');
        
        //define a global player variable
        //players will be global since Phaser deletes objects after a game state has ended (see below for explanation of game state)
        //We don't want to have to recreate a player object every single time we end a battle, so we will make a global player
        var player = new rpgEntity();
        player.gold = 0;
        player.experience = 0;
        player.items = [];
        player.skills = [];
        
        player.respawn = function(spawnPoint) {
            
            this.health = this.maxHealth;
            this.sprite.x = spawnPoint.x;
            this.sprite.y = spawnPoint.y;
            this.sprite.animations.stop();
            this.sprite.animations.frame = 0;
        }
        
        //flag used to check if player just started playing the game
        //used by the overworld state to determine what intro effect it should use
        var justStartedGame = true;
        
        //{
            
            //players will have various stats, these will be loaded from the rails data base
            //for now all we have is the player's sprite, which is a phaser game object that handles drawing/movement, and other great stuff
            //we don't actually need to put this since we can add it later
            //sprite: 0,
            
            //we will also have other stats about the player, read for the data base. uncomment later as needed
            /*
            anything with @player should be embeded ruby, right now leave it unembed
            
            this.level = @player.level
            this.health = ...
            ...
            ...
            */
        //};
        
        /*
        
        i put the loadState here because it loads assets using the asset pipeline.
        to do that it needs to call ruby functions, which it can't do in its own javascript file
        
        
        */
        
        //loading state should load ALL of the game's resources
        //this will cache (store in memory) all of the required pictures, sounds, level data for later use
        //this state is also where we generate the game world based on the players location
        //cached data will be saved to the global game object, so we can use it in later states
        var loadState = {
            
            //place to load files
            preload: function() {
                
                //loading is done using the following function
                //game.load.*   where * represents an object type to load
                //IMPORTANT: LOOK AT HOW WE GET THE PATH TO RESOURCE FILES, WE HAVE TO USE EMBED RUBY TO GENERATE THE PATH TO IT
                
                //load test player sprite sheet
                //remeber that the first parameter is always a hash key to refer to this object later
                //look at the documentation for all the parameters
                game.load.spritesheet('player', '<%= asset_path("roshan.png") %>', 32, 48);
                
                //since a player's game map is dependent on thier real world location, the map we load will depend on their location
                //so here is where we specify what map to load
                //we will assume mapWorldToGame will take a real world coordinate, and return an ingame map ID
                //we will also assume that all of our maps will be named mapI, where I is the map's id as a number
                
                //var mapId = mapWorldToGame(@player.realWorldLocation.x, @player.realWorldLocation.y);
                //var mapName = 'map' + mapId.toString();
                
                //now we load the tile set
                //tile maps will be created in the Tiled Level editor, which will give us a JSON file
                //we should use mapName instead of map.json, but we haven't created the map funcitonality so for now just use a preset level
                game.load.tilemap('level', '<%= asset_path("map.json") %>', null, Phaser.Tilemap.TILED_JSON);
                
                //we also want to load all the possible types of monsters in this level
                //we can assume that the getMonstersInMap will receive the name of a map, and returns the name of the file containing an array of monster names that can spawn on that map
                //These monster names will be used as keys into the mosnter database, and we will use it to retreive a given monster
                
                //var monsterListFile = getMonstersInMap(mapName)
                
                //now load this array for later use
                game.load.json('monsterList', '<%= asset_path("monsterList.json") %>');
                
                //now we have to load the actual mosnter database
                //this could also be stored in the server as a database, and we can use AJAX calls to receive the data
                //but for now i've saved all the mosnter data into app/assets/monsters/monsters.json
                game.load.json('monsterData', '<%= asset_path("monsters.json") %>');
                
                //now we would load all the images for the mosnters, but for now just load the orc image because i don't have any other mosnters
                game.load.spritesheet('orc','<%= asset_path("ifrit.png") %>', 80, 80);
                
                //the above just loads the json file, but doens't load the tileSheet (the images used to draw every single tile)
                //here we load the tile image
                //again we would be using the mapName variable if it was set up
                game.load.image('tileset', '<%= asset_path("TileSet.png") %>');
                
            },
            
            //create function creats the required object for this game state
            create: function() {
                
                //create a text that says loading
                //very simple loading screen
                var style = { font: "bold 32px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle"};
        		this.text = game.add.text(0, 0, "loading", style);
                
                //HERE IS WHERE WE WILL LOAD THE PLAYER
                //the player is created here and used in all later states
                player.sprite = game.add.sprite(0, 0, 'player', 0);
                
                //we want player to actually collide with stuff, so add a physcis body
                game.physics.arcade.enable(player.sprite);
                
                //modify the player's hitbox so it doesn't look like he is collidig with thin air
                player.sprite.body.setSize(26, 18, 3, 30);
                
                //prevent the player from leaving the world bounds, this means that player's can't walk off the edge of teh screen
                player.sprite.body.collideWorldBounds = true;
                
                //add all of the player's animations
        		player.sprite.animations.add('left', [4, 5, 6, 7], 10, true);
        		player.sprite.animations.add('right', [8, 9, 10, 11], 10, true);
        		player.sprite.animations.add('up', [12, 13, 14, 15], 10, true);
        		player.sprite.animations.add('down', [0, 1, 2, 3], 10, true);
        		player.sprite.animations.add('attack', [4, 5, 6, 7, 4, 5, 6, 7, 4], 7, false);
        		player.sprite.animations.add('dying', [0, 4, 8, 12, 0, 4, 8, 12], 7, false);
        		
        		//right now the player will draw onto the screen since phaser automatically draws all new sprites
        		//we want to not draw the player to the screen, so we remove him from phaser's rendering list
        		//also once the Load state finishes, the player's sprite will automatically be destoryed by phaser, 
        		//but we want to keep the sprite for the actual gameplay state
        		//by removing player from the object list, we prevent him from being drawn, as well as being destoryed.
        		game.world.remove(player.sprite);
        		
        		//all obejcts have been loaded and created, so now we can start the game
        		game.state.start('overworld');
            }
        };
        
        document.getElementById("additional").innerHTML = typeof overworldState;
        
        //register all of the gameplay states
        game.state.add('boot', bootState);
        game.state.add('load', loadState);
        game.state.add('overworld', overworldState);
        game.state.add('battle', battleState);
        
        //now run the boot state, which will call load and overworld as needed
        game.state.start('boot');

    </script>
</div>