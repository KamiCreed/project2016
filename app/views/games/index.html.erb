<style>
#asdf{
    color=white;
    font-size: 50px;
    text-align: center;
}
#Game{
    padding: 50px;
}
</style>
<!--This is where the game will go -->
<p id="asdf"><font face="Broadway"><B>Let's start our journey!</B></font></p>

<p id="additional" style="font-size: 20px; color: red; text-align: center"> </p>

<div class="row">
  <div class="col-md-6">
  
  
  

            <!-- Style the game display canvas however you wish by syling the 'Game' id -->
            <div id="Game">
    
    <!-- Page specific javascript, don't include these into the resource manifest file since we don't want these
        to be available in every single page of our application.-->
    <%= javascript_include_tag "textDisplay" %>
    <%= javascript_include_tag "screenTransitionEffects"%>
    <%= javascript_include_tag "rpgEntity" %>
    <%= javascript_include_tag "stateManager" %>
    <%= javascript_include_tag "objectHighlighter" %>
    <%= javascript_include_tag "textbox" %>
    <%= javascript_include_tag "actionDisplay" %>
    <%= javascript_include_tag "bootState"%>
    <%= javascript_include_tag "overworldSubstateFunctions" %>
    <%= javascript_include_tag "overworldState"%>
    <%= javascript_include_tag "battleSubstateFunctions"%>
    <%= javascript_include_tag "battleState" %>
    <%= javascript_include_tag "pauseMenuState" %>
    <%= javascript_include_tag "pauseMenuSubstateFunctions" %>
    <%= javascript_include_tag "questManager" %>
    <%= javascript_include_tag "itemManager" %>
    <%= javascript_include_tag "confirmation" %>
    
    <script>
        //Returns a random integer between min (inclusive) and max (inclusive)
        function getRandomInt(min, max) {
            
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        
        function clamp(number, min, max) {
            
            return Math.max(min, Math.min(number, max));
        };
        
        //create instance of the game engine.
        //This creates the canvas for the game to display, and allows you to use the Phaser engine
        var game = new Phaser.Game(800, 600, Phaser.AUTO, 'Game');
        
        //global variable that stores important keys used by different parts of the game
        //mapKey is the key to a tileset data thats been preloaded
        //monsterListKey is key to the preloaded list of monsters for this map
        //tilesetKeys are keys to the tileset used to draw this map, a single tilemap can use multiple tilesets
        var mapKeys = {
            
            mapKey: "default",
            monsterListKey: "defaultMonsters",
            tilesetKeys: ["tileset1"],
            battleBackgroundKeys: ["forestClearing"],
            spawnPoint: {x: 0, y: 0}
        }
        
        //global sound effects
        var globalSfx = {
            
            highlightOption: {},
            selectOption: {},
            cancel: {},
            invalidSelection: {},
            selectMonster: {},
            basicAttack: {},
            entityKilled: {},
            loseBattle: {},
            winBattle: {},
            escapeBattle: {},
            fireballCreate: {},
            fireballUpdate: {},
            fireballDestroy: {},
            useItem: {},
            slashUpdate: {},
            discardItem: {},
            pause: {},
            unpause: {}
        }
        
        //global bgm
        var globalBgm = {
            
            overworld: {},
            battle: {},
            bossBattle: {},
            activeBgm: {},
            volume: 0.4
        }
        
        //tilemap is global
        var tilemap = {
            
            map: {},
            background1: {},
            background2: {},
            solid: {},
            foreground: {},
            spawnPoint: {},
            bosses: []
        }
        
        var fightingBoss = false;
        var bossName = "";
        
        //define a global player variable
        //players will be global since Phaser deletes objects after a game state has ended (see below for explanation of game state)
        //We don't want to have to recreate a player object every single time we end a battle, so we will make a global player
        var player = new rpgEntity();
        
        player.experience = 0;
        player.experienceToNextLevel = 1;
        player.gold = 0;
        player.strength = 2000;
        player.items = {};
        //player.skills = ["Fireball", "Slash"];
        player.deaths = 0;
        player.quests = {};
        
        player.load = function() {
            
            this.level = <%= @currentUser.player.level%>;
            this.name = '<%= @currentUser.username%>';
            this.maxHealth = <%= @currentUser.player.max_health%>;
            this.health = Math.min(<%= @currentUser.player.health%>, this.maxHealth); //if some how the health exceeded max health
            this.maxMana = <%= @currentUser.player.max_mana%>;
            this.mana = <%= @currentUser.player.mana%>;
            this.magicPower = <%= @currentUser.player.magic_power%>;
            this.magicDefense = <%= @currentUser.player.magic_defense%>;
            this.gold = <%= @currentUser.player.gold%>;
            this.experienceToNextLevel = <%= @currentUser.player.experience_to_next_level%>;;
            this.experience = <%= @currentUser.player.experience%>;
            this.strength = <%= @currentUser.player.strength%>;
            this.defense = <%= @currentUser.player.defense%>;
            this.deaths = <%= @currentUser.player.deaths%>;
            
            var skills = [];
            
            <% @currentUser.player.skills.each do |skillName|%>
                
                skills.push("<%=skillName%>");
            <%end%>
            
            this.skills = skills;
            
            //for whatever reason json parse isn't working so use ruby to set the data
            var items = {};
            
            <% @currentUser.player.items.each do |name, quantity| %>
            
                var name = '<%= name%>';
                var quantity = '<%= quantity%>';
                
                items[name] = createItem(name, quantity);
            <%end%>
            
            this.items = items;
            
            loadQuests();
        };
        
        player.save = function() {
            
            var saveData = {
                
                level: this.level,
                max_health: this.maxHealth,
                health: this.health,
                max_mana: this.maxMana,
                mana: this.mana,
                magic_power: this.magicPower,
                magic_defense: this.magicDefense,
                gold: this.gold,
                experience_to_next_level: this.experienceToNextLevel,
                experience: this.experience,
                strength: this.strength,
                defense: this.defense,
                deaths: this.deaths,
                skills: this.skills,
                items: {},
                quest_progress: {}
            };
            
            for(quest in player.quests) {
                
                saveData.quest_progress[quest] = {};
                saveData.quest_progress[quest].progress = player.quests[quest].progress;
                saveData.quest_progress[quest].completed = player.quests[quest].completed;
            }
            
            for(item in this.items) {
                
                saveData.items[item] = this.items[item].quantity;
            }
            
            $.ajax( {
                
                type: "POST",
                url: "/game/save",
                data: JSON.stringify(saveData),
                contentType: "application/json",
                dataType: "json"
            });
        };
        
        player.respawn = function(spawnPoint) {
            
            this.health = this.maxHealth;
            this.mana = this.maxMana;
            this.sprite.x = spawnPoint.x;
            this.sprite.y = spawnPoint.y;
            this.sprite.animations.stop();
            this.sprite.animations.frame = 0;
        };
        
        //increases player's level
        //uses up the currente exp, theres no need to subtract it after this function is called
        player.levelUp = function() {
            
            this.level += 1;
            
            //normally we'd give the player some stat points that he can use
            //for now just raise his stats
            this.maxHealth += 20;
            this.health = this.maxHealth;
            this.maxMana += 10;
            this.mana = this.maxMana;
            this.magicPower += 5;
            this.magicDefense += 5;
            this.strength += 5;
            this.defense += 5;
            this.experience -= this.experienceToNextLevel;
            this.experienceToNextLevel += 5 * this.level;
        };
        
        //function cann't be called before you preload the coordinateMapping.json file
        //returns an object containing 3 attributes
        //the first attribute called 'mapKey' is a string containing a key to a preloaded tilemap for this level
        //2nd attribute called 'monsterListKey' is a key to a preloaded monster list for this level
        //3rd attribute called 'tilesetKey' is a key to a preloaded tileset image for this level
        function mapCoordinateToMap() {
            
            mapData = {};
            
            var mappings = game.cache.getJSON("coordinateMapping");
            var playerPosX = <%=@latitude%>;
            var playerPosY = <%=@longitude%>;
            
            //set to default data first
            mapData.mapKey = mappings["default"].mapKey;
            mapData.monsterListKey = mappings["default"].monsterListKey;
            mapData.tilesetKeys = mappings["default"].tilesetKeys;
            mapData.battleBackgroundKeys = mappings["default"].battleBackgroundKeys;
            mapData.spawnPoint = mappings["default"].spawnPoint;
            
            //object will contain a list of areas
            //each area has a bounding box that defines what coordinates map to that area
            //latitute increases to the left and down
            //some weird coordinate system, don't chagne any of the inequalites below, even if it looks incorrect
            for(area in mappings) {
                
                if(playerPosX >= mappings[area].left || playerPosX < mappings[area].right) {
                    
                    continue;
                }
                
                if(playerPosY <= mappings[area].top || playerPosY > mappings[area].bottom) {
                    
                    continue;
                }
                
                mapData.tilesetKeys = mappings[area].tilesetKeys;
                mapData.mapKey = mappings[area].mapKey;
                mapData.monsterListKey = mappings[area].monsterListKey;
                mapData.battleBackgroundKeys = mappings[area].battleBackgroundKeys;
                mapData.spawnPoint = mappings["default"].spawnPoint;
                
                break;
            }
            
            return mapData;
        }
        
        function loadQuests() {
            
            <% quests = @currentUser.player.quests %>
            
            <% quests.each do |quest| %>
            
                //skip turned in quests
                <% next if @currentUser.player.accepted?(quest).turned_in%>
                
                quest = <%=quest.to_json.html_safe%>
                quest.type = "<%= quest.type%>"
                quest.progress = <%= @currentUser.player.accepted?(quest).progress.to_json.html_safe%>
                quest.completed = <%= @currentUser.player.accepted?(quest).completed %>
                
                //check if no progress is provided
                if(jQuery.isEmptyObject(quest.progress)) {
                    
                    if(quest.type.toLowerCase() == "killquest" || quest.type.toLowerCase() == "gatherquest") {
                        
                        for(name in quest.target) {
                            
                            quest.progress[name] = 0;
                        }
                    }
                }
                
                player.quests[quest.id] = quest;
            <%end%>
            
            questManager.onInventoryCheck();
        }
        
        function removePersistentObjectsFromWorld() {
            
            game.world.remove(player.sprite);
            game.world.remove(tilemap.background1);
            game.world.remove(tilemap.background2);
            game.world.remove(tilemap.foreground);
            game.world.remove(tilemap.solid);
            game.world.remove(tilemap.spawnPoint);
            
            for(var i = 0; i < tilemap.bosses.length; ++i) {
                
                game.world.remove(tilemap.bosses[i]);
            }
        }
        
        function addPersistentObjectsToWorld() {
            
            game.add.existing(tilemap.background1);
            game.add.existing(tilemap.background2);
            game.add.existing(tilemap.spawnPoint);
            game.add.existing(tilemap.solid);
            game.add.existing(player.sprite);
            game.add.existing(tilemap.foreground);
            
            for(var i = 0; i < tilemap.bosses.length; ++i) {
                
                game.add.existing(tilemap.bosses[i]);
            }
        }
        
        function removeBoss(name) {
            
            for(var i = 0; i < tilemap.bosses.length;) {
                
                if(tilemap.bosses[i].name === name) {
                    
                    tilemap.bosses[i].destroy();
                    tilemap.bosses.splice(i, 1);
                    continue;
                }
                
                ++i;
            }
        };
        
        //loading state should load ALL of the game's resources
        //this will cache (store in memory) all of the required pictures, sounds, level data for later use
        //this state is also where we generate the game world based on the players location
        //cached data will be saved to the global game object, so we can use it in later states
        var loadState = {
            
            loadTileMapData: function() {
                
                //the assets pipeline is garbage so we have to load all the tilemap data
                game.load.tilemap('surrey', '<%= asset_path("surrey.json") %>', null, Phaser.Tilemap.TILED_JSON);
                game.load.tilemap('burnaby', '<%= asset_path("burnaby.json") %>', null, Phaser.Tilemap.TILED_JSON);
                game.load.tilemap('default', '<%= asset_path("default.json") %>', null, Phaser.Tilemap.TILED_JSON);
            },
            
            loadTileSetImages: function() {
                
                game.load.image('tileset1', '<%= asset_path("TileSet.png") %>');
                game.load.image('tileset2', '<%= asset_path("trees.png") %>');
                game.load.image('tileset3', '<%= asset_path("tileset1.png") %>');
                game.load.image('spawnPoint', '<%= asset_path("spawnPoint.png")%>');
            },
            
            loadMonsterLists: function() {
                
                game.load.json('surreyMonsters', '<%= asset_path("surreyMonsters.json") %>');
                game.load.json('burnabyMonsters', '<%= asset_path("burnabyMonsters.json") %>');
                game.load.json('defaultMonsters', '<%= asset_path("defaultMonsters.json") %>');
            },
            
            loadJSONDatabases: function() {
                
                //load the mosnter data base
                game.load.json('monsterData', '<%= asset_path("monsters.json") %>');
                
                //load item database
                game.load.json('itemData', '<%= asset_path("items.json") %>');
                
                 //load quests
                game.load.json('questData', '<%= asset_path("quests.json") %>');
                
                //load skill data, and animations
                game.load.json('skillData', '<%= asset_path("skills.json") %>');
            },
            
            loadMonsterSpritesheets: function() {
                
                //load spritesheets for all the monsters
                //now we would load all the images for the mosnters, but for now just load the orc image because i don't have any other mosnters
                game.load.spritesheet('orc','<%= asset_path("orc.png") %>', 64, 64);
                game.load.spritesheet('slime', '<%= asset_path("slime.png")%>', 70, 60);
                game.load.spritesheet('dragon', '<%= asset_path("dragon.png")%>', 96, 96);
            },
            
            loadBattleBackgroundImages: function() {
                
                //load images used for the battle backgrounds
                game.load.image('forestClearing', '<%= asset_path("forestClearing.png") %>');
            },
            
            loadSkillSpritesheets: function() {
                
                game.load.spritesheet('fireball','<%= asset_path("fireball.png") %>', 32, 32);
                game.load.spritesheet('slash', "<%= asset_path("slash.png")%>", 100, 100);
            },
            
            loadSoundEffects: function() {
                
                game.load.audio('highlightOption', '<%= asset_path("highlightOption.wav")%>');
                game.load.audio('selectOption', '<%= asset_path("selectOption.mp3")%>');
                game.load.audio('cancel', '<%= asset_path("cancel.wav")%>');
                game.load.audio('invalidSelection', '<%= asset_path("invalidSelection.wav")%>');
                game.load.audio('selectMonster', '<%= asset_path("selectMonster.mp3")%>');
                game.load.audio('basicAttack', '<%= asset_path("basicAttack.wav") %>');
                game.load.audio('entityKilled', '<%= asset_path("entityKilled.wav") %>');
                game.load.audio('loseBattle', '<%= asset_path("loseBattle.wav") %>');
                game.load.audio('winBattle', '<%= asset_path("winBattle.wav") %>');
                game.load.audio('escapeBattle', '<%= asset_path("escapeBattle.wav") %>');
                game.load.audio('fireballCreate', '<%= asset_path("fireballCreate.wav") %>');
                game.load.audio('fireballUpdate', '<%= asset_path("fireballUpdate.wav") %>');
                game.load.audio('fireballDestroy', '<%= asset_path("fireballDestroy.wav") %>');
                game.load.audio('useItem', '<%= asset_path("useItem.wav") %>');
                game.load.audio('slashUpdate', '<%= asset_path("slash.wav") %>');
                game.load.audio('discardItem', '<%= asset_path("discardItem.wav") %>');
                game.load.audio('pause', '<%= asset_path("pause.mp3") %>');
                game.load.audio('unpause', '<%= asset_path("unpause.mp3") %>');
            },
            
            loadBackgroundMusic: function() {
                
                game.load.audio("overworld", '<%= asset_path("WorldMap.mp3")%>');
                game.load.audio("battle", '<%= asset_path("NormalBattle.mp3")%>');
                game.load.audio('bossBattle', '<%= asset_path("BossFight.mp3") %>');
            },
            
            //place to load files
            preload: function() {
                
                //load test player sprite sheet
                game.load.spritesheet('player', '<%= asset_path("roshan.png") %>', 32, 48);
                
                //load data that maps a real world GPS location to an ingame map file
                game.load.json('coordinateMapping', '<%= asset_path("coordinateMapping.json")%>');
                
                this.loadTileMapData();
                this.loadTileSetImages();
                this.loadMonsterLists();
                this.loadJSONDatabases();
                this.loadMonsterSpritesheets();
                this.loadBattleBackgroundImages();
                this.loadSkillSpritesheets();
                this.loadSoundEffects();
                this.loadBackgroundMusic();
            },
            
            generateTilemap: function(spawnPoint) {
                
                //we already loaded the tilemap data in the load state, we just need to set them to a phaser object
                tilemap.map = game.add.tilemap(mapKeys.mapKey);
                
                //add all tileset images to the tileset
                for(var i = 1; i <= mapKeys.tilesetKeys.length; ++i) {
                    
                    tilemap.map.addTilesetImage('tileset' + i.toString(), mapKeys.tilesetKeys[i - 1]);
                }
                
                //load all layers
                tilemap.background1 = tilemap.map.createLayer('background1');
                tilemap.background2 = tilemap.map.createLayer('background2');
                tilemap.solid = tilemap.map.createLayer('solid');
                tilemap.foreground = tilemap.map.createLayer('foreground');
                tilemap.background1.resizeWorld();
                tilemap.map.setCollisionBetween(1, 10000, true, 'solid');
                
                //default spawn point
                tilemap.spawnPoint = {x: 0, y: 0};
                
                //load spawn point
                for(var i = 0; i < tilemap.map.objects["objects"].length; ++i) {
                    
                    if(tilemap.map.objects["objects"][i].properties.type !== "spawnPoint") {
                        
                        continue;
                    }
                    
                    var spawnPointObject = tilemap.map.objects["objects"][i];
                    
                    //create spawnPoint sprite
                    tilemap.spawnPoint = game.add.sprite(spawnPointObject.x, spawnPointObject.y, spawnPointObject.properties.sprite);
                }
                
                //load bosses
                tilemap.bosses = [];
                
                for(var i = 0; i < tilemap.map.objects["objects"].length; ++i) {
                    
                    if(tilemap.map.objects["objects"][i].properties.type !== "boss") {
                        
                        continue;
                    }
                    
                    var bossObject = tilemap.map.objects["objects"][i];
                    
                    tilemap.bosses.push(game.add.sprite(bossObject.x, bossObject.y, bossObject.properties.sprite, bossObject.startingFrame));
                    game.physics.arcade.enable(tilemap.bosses[tilemap.bosses.length - 1]);
                    tilemap.bosses[tilemap.bosses.length - 1].body.immovable = true;
                    tilemap.bosses[tilemap.bosses.length - 1].name = bossObject.properties.name;
                }
            },
            
            //create function creats the required object for this game state
            create: function() {
                
                lastState = "load";
                
                //create a text that says loading
                //very simple loading screen
                var style = { font: "bold 32px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle"};
        		this.text = game.add.text(0, 0, "loading", style);
                
                //HERE IS WHERE WE WILL LOAD THE PLAYER
                //the player is created here and used in all later states
                player.sprite = game.add.sprite(0, 0, 'player', 0);
                
                //we want player to actually collide with stuff, so add a physcis body
                game.physics.arcade.enable(player.sprite);
                
                //modify the player's hitbox so it doesn't look like he is collidig with thin air
                player.sprite.body.setSize(26, 18, 3, 30);
                
                //prevent the player from leaving the world bounds, this means that player's can't walk off the edge of teh screen
                player.sprite.body.collideWorldBounds = true;
                
                //load player data from server
                player.load();
                
                //add basic attack skill to all rpg entities
                rpgEntity.prototype.basicAttack = game.cache.getJSON("skillData")["Basic Attack"];
                
                //add all of the player's animations
        		player.sprite.animations.add('left', [4, 5, 6, 7], 10, true);
        		player.sprite.animations.add('right', [8, 9, 10, 11], 10, true);
        		player.sprite.animations.add('up', [12, 13, 14, 15], 10, true);
        		player.sprite.animations.add('down', [0, 1, 2, 3], 10, true);
        		player.sprite.animations.add('attack', [4, 5, 6, 7, 4, 5, 6, 7, 4], 7, false);
        		player.sprite.animations.add('dying', [0, 4, 8, 12, 0, 4, 8, 12], 7, false);
        		
        		for(soundName in globalSfx) {
        		    
        		    globalSfx[soundName] = game.add.sound(soundName, 2);
        		}
        		
        		for(songName in globalBgm) {
        		    
        		    if(songName != "volume")
        		    globalBgm[songName] = game.add.sound(songName, globalBgm.volume, true);
        		}
        
        		//load keys to the map data
                mapKeys = mapCoordinateToMap();
                
                //create tilemap here because its too slow to reload it
                this.generateTilemap(mapKeys.spawnPoint);
        		
        		//all obejcts have been loaded and created, so now we can start the game
        		game.state.start('overworld');
            },
            
            shutdown: function() {
                
                removePersistentObjectsFromWorld();
            }
        };
        
        //register all of the gameplay states
        game.state.add('boot', bootState);
        game.state.add('load', loadState);
        game.state.add('overworld', overworldState);
        game.state.add('pauseMenu', pauseMenuState);
        game.state.add('battle', battleState);
        
        //keep track of the last used state
        lastState = "null";
        
        //now run the boot state, which will call load and overworld as needed
        game.state.start('boot');
    </script>
</div>